name: Build and Release

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Build application
        run: npm run build

      - name: Package application
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            npm run build:mac
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            npm run build:win
          else
            npm run build:linux
          fi

      - name: List release directory
        run: ls -al release

      - name: Verify generated files
        run: |
          echo "Generated files:"
          find release -type f

      - name: Find generated installer
        id: find_installer
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "INSTALLER_FILE=$(find release -name '*-Mac-*.dmg' | head -n 1)" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "INSTALLER_FILE=$(find release -name '*-Windows-*.exe' | head -n 1)" >> $GITHUB_ENV
          else
            echo "INSTALLER_FILE=$(find release -name '*-Linux-*.AppImage' | head -n 1)" >> $GITHUB_ENV
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: v0.0.0
          release_name: Release v0.0.0
          draft: true
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.INSTALLER_FILE }}
          asset_name: ${{ env.INSTALLER_FILE }}
          asset_content_type: application/octet-stream
